// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands.shooter;

import java.util.Optional;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;

import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import frc.robot.Constants.DriveConstants;
import frc.robot.Constants.FieldConstants;
import frc.robot.Constants.ShooterConstants;
import frc.robot.Constants.TowerConstants;
import frc.robot.commands.drive.DriveCommandBase;
import frc.robot.extras.SmarterDashboardRegistry;
import frc.robot.subsystems.shooter.ShooterSubsystem;
import frc.robot.subsystems.swerve.DriveSubsystem;
import frc.robot.subsystems.tower.TowerSubsystem;
import frc.robot.subsystems.vision.VisionSubsystem;

public class ShootSpeaker extends DriveCommandBase {
  private final DriveSubsystem driveSubsystem;
  private final ShooterSubsystem shooterSubsystem;
  private final TowerSubsystem towerSubsystem;
  private final VisionSubsystem visionSubsystem;

  private final DoubleSupplier leftX, leftY;
  private final BooleanSupplier isFieldRelative;

  private double headingError = 0;

  ProfiledPIDController turnController = new ProfiledPIDController(
    ShooterConstants.AUTO_SHOOT_P,
    ShooterConstants.AUTO_SHOOT_I, 
    ShooterConstants.AUTO_SHOOT_D, 
    ShooterConstants.AUTO_SHOOT_CONSTRAINTS
  );

                                              // in1on  in1off in1on  out1 
  private boolean noteTriggers[] = new boolean[]{false, false, false, false};
  private boolean lastSensorState = false;
  private boolean isRed = false;
  private double desiredHeading = 0;
  private Translation2d speakerPos;
  
  /** Creates a new ShootSpeaker. */
  public ShootSpeaker(DriveSubsystem driveSubsystem, ShooterSubsystem shooterSubsystem, VisionSubsystem visionSubsystem, TowerSubsystem towerSubsystem, DoubleSupplier leftX, DoubleSupplier leftY, BooleanSupplier isFieldRelative) {
    super(driveSubsystem, visionSubsystem);
    this.driveSubsystem = driveSubsystem;
    this.shooterSubsystem = shooterSubsystem;
    this.towerSubsystem = towerSubsystem;
    this.visionSubsystem = visionSubsystem;
    this.leftX = leftX;
    this.leftY = leftY;
    this.isFieldRelative = isFieldRelative;
    addRequirements(shooterSubsystem, towerSubsystem);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    towerSubsystem.setTowerSpeed(TowerConstants.TOWER_MOTOR_SPEED);
    shooterSubsystem.setRollerSpeed(ShooterConstants.ROLLER_SPEED);
    shooterSubsystem.setShooterSpeed(ShooterConstants.ROLLER_SPEED);

    Optional<Alliance> alliance = DriverStation.getAlliance();
    if (alliance.isPresent()) {
      isRed = alliance.get() == Alliance.Red;
    } else {
      isRed = true;
    }
    speakerPos = isRed ? new Translation2d(FieldConstants.RED_SPEAKER_X, FieldConstants.RED_SPEAKER_Y) : new Translation2d(FieldConstants.BLUE_SPEAKER_X, FieldConstants.BLUE_SPEAKER_Y);
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    super.execute();
    
    // note trigger logic (see slack/notepad)
    boolean sensorState = shooterSubsystem.getSensor();
    if (sensorState != lastSensorState) {
      if (sensorState) {
        if (!noteTriggers[0]) {
          // top of note in from the tower
          noteTriggers[0] = true;
        } else if (!noteTriggers[2]) {
          // bottom of note in from tower
          noteTriggers[2] = true;
        }
      } else {
        if (!noteTriggers[1]) {
          // top of note past sensor
          noteTriggers[1] = true;
        }
      }
      lastSensorState = sensorState;
    }

    // get positions of various things
    Translation2d robotPos = SmarterDashboardRegistry.getPose().getTranslation();
    // distance (for speaker lookups)
    double distance = robotPos.getDistance(speakerPos);
    // arctangent for desired heading
    desiredHeading = Math.atan2((speakerPos.getY() - robotPos.getY()), (speakerPos.getX() - robotPos.getX())) * 180.0 / Math.PI;
    // heading error (also used in isReadyToShoot())
    headingError = driveSubsystem.getHeading() - desiredHeading;
    // get PID output
    double turnOutput = turnController.calculate(headingError, 0);
    // allow the driver to drive slowly (NOT full speed - will mess up shooter)
    driveSubsystem.drive(
      leftX.getAsDouble(), 
      leftX.getAsDouble(), 
      turnOutput, 
      isFieldRelative.getAsBoolean()
    );

    // if all 3 note triggers have been hit:
    if (noteTriggers[0] && noteTriggers[1] && noteTriggers[2]) {
      // stop all tower/shooter motors
      towerSubsystem.setTowerSpeed(0);
      shooterSubsystem.setRollerSpeed(0);
      shooterSubsystem.setShooterSpeed(0);

      // set pivot to desired
      shooterSubsystem.setShooterPivotFromDistance(distance);

      // if pivot is close enough
      if (shooterSubsystem.isPivotWithinAcceptableError()) {
        if (sensorState) {
          // roll the note back until the sensor registers that its not there
          shooterSubsystem.setRollerSpeed(-ShooterConstants.ROLLER_SPEED);
        } else {
          // once its not there, spin up the shooter and stop the rollers
          shooterSubsystem.setShooterRPMFromDistance(distance);
          shooterSubsystem.setRollerSpeed(0);
        }
      }
    }

    // if we are ready to shoot:
    if (isReadyToShoot()) {
      // feed the note into the flywheels
      shooterSubsystem.setRollerSpeed(ShooterConstants.ROLLER_SPEED);
    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    shooterSubsystem.setLeftMotorToNeutral();
    shooterSubsystem.setPivotMotorToNeutral();
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }

  public boolean isReadyToShoot() {
    return (Math.abs(headingError) < DriveConstants.HEADING_ACCEPTABLE_ERROR) && (shooterSubsystem.isShooterWithinAcceptableError()) && (shooterSubsystem.isPivotWithinAcceptableError());
  }
}
